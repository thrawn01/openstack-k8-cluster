#!/bin/bash
#
# This script is designed to be run inside the container
#

# fail hard and fast even on pipelines
# set -eo pipefail

# set debug based on envvar
[[ $DEBUG ]] && set -x

DIR=$(dirname $0)

# functions
. $DIR/functions


# Environment variables that should be passed in via `docker run` command.

# Defaults for your app:
export APP_NAME=${APP_NAME:-"percona"}
export MYSQL_USER=${MYSQL_USER:-admin}
export MYSQL_PASS=${MYSQL_PASS:-admin}
export REP_USER=${REP_USER:-replicator}
export REP_PASS=${REP_PASS:-replicator}
export ETCD_HOST=${ETCD_HOST:-$HOST}
export CLUSTER=${CLUSTER:-percona}
export BOOT_SEQ=${BOOT_SEQ:-1}

export IP=$(grep $HOSTNAME /etc/hosts | awk '{ print $1 }')

export HOST=${HOST:-$IP}

if [[ -n $ETCD_HOST ]]; then
  echo "==> HOST or ETCD_HOST set.  starting ${APP_NAME} etcd support."
  export ETCD_PORT=${ETCD_PORT:-4001}
  export ETCD="$ETCD_HOST:$ETCD_PORT"
  export ETCD_PATH=${ETCD_PATH:-"/openstack/database"}
  export ETCD_TTL=${ETCD_TTL:-30}
  export ETCD_OPTIONS="--no-sync -C $ETCD"
  export CONFD_OPTIONS="-node $ETCD -config-file /app/confd_etcd.toml"
  configure_etcd
  # App specific
  etcd_make_directory repl_active
  etcd_set_default credentials/adminUser ${MYSQL_USER}
  etcd_set_default credentials/adminPass ${MYSQL_PASS}
  etcd_set_default credentials/repUser ${REP_USER}
  etcd_set_default credentials/repPass ${REP_PASS}
  etcd_set_default config/cluster_name ${CLUSTER}

  mv /app/conf.d/optional/service-confd.toml /app/conf.d/service-confd.toml
else
  echo "==> ETCD_HOST not set.  starting ${APP_NAME} without etcd support."
  export CONFD_OPTIONS="-config-file /app/confd_env.toml"
  # App specific equiv to etcd /services/example/text
fi

# make service directories based on service templates
for service in $(ls /app/templates/service/); do mkdir -p /etc/service/$service; done

# wait for confd to run once and install initial templates
until confd -onetime $CONFD_OPTIONS; do
  echo "echo ==> ${APP_NAME}: waiting for confd to write initial templates..."
  [[ -n $ETCD_HOST ]] && sleep $(($ETCD_TTL/2))  # sleep for half the TTL
done

ln -s /dev/stdout /var/log/mysql/error.log

init_database

cluster_members

if [[ -z $CLUSTER_MEMBERS ]]; then
  # Perform Election
  echo "==> Performing Election..."
  if etcdctl $ETCD_OPTIONS mk --ttl 600 $ETCD_PATH/election $HOST >/dev/null 2>&1; then
    echo "-----> Hurruh I win!"
    export PERCONA_ARGS="--wsrep_cluster_address=gcomm:// $WSREP_OPTIONS"
  else
    echo -n "-----> I lost election.  Waiting for leader."
    LEADER=$(etcdctl --no-sync -C $ETCD get $ETCD_PATH/election)
    echo "-----> joining cluster led by $LEADER"
    export PERCONA_ARGS="--wsrep_cluster_address=gcomm://$LEADER $WSREP_OPTIONS"
  fi
else
  echo "-----> joining cluster with known members: $CLUSTER_MEMBERS"
  export PERCONA_ARGS="--wsrep_cluster_address=gcomm://$CLUSTER_MEMBERS $WSREP_OPTIONS"
fi

# one final rewrite of config files
until confd -onetime $CONFD_OPTIONS; do
  echo "echo ==> ${APP_NAME}: waiting for confd to update templates..."
  [[ -n $ETCD_HOST ]] && sleep $(($ETCD_TTL/2))  # sleep for half the TTL
done

echo Starting ${APP_NAME}

# smart shutdown on SIGINT and SIGTERM
trap on_exit INT TERM

exec /app/bin/my_init

exit 1


# --wsrep_cluster_address=gcomm://10.1.49.5
